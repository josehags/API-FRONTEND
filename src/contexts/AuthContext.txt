import {
  createContext,
  ReactNode,
  useCallback,
  useContext,
  useState,
} from 'react';

import { APIUsuarios } from '../Services/Axios/baseService';
// import { useNavigate } from 'react-router-dom';

type AuthContextData = {
  user: UserProps | null;
  isAuthenticated: boolean;
  signin: (credentials: SignInPropos) => Promise<void>;
  //logout: () => void;
  token: string;
};

type UserProps = {
  id: string;
  name: string;
  email: string;
};

type SignInPropos = {
  email: string;
  password: string;
  temporaryPassword: string;
};

type AuthProviderProps = {
  children: ReactNode;
};

export const AuthContext = createContext({} as AuthContextData);

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<UserProps | null>(null);
  const [token, setToken] = useState('');
  // const navigate = useNavigate();

  // se o useState não tiver nada o isAuthenticated sera convertido para falso
  const isAuthenticated = !!user;

  async function signin({ email, password }: SignInPropos) {
    try {
      const response = await APIUsuarios.post('/login', {
        email,
        password,
      });
      // console.log(response.data);
      const { id, name } = response.data;

      const storagedToken = localStorage.getItem('x-access-token');
      console.log(token);
      if (!token && storagedToken) {
        const storagedUser = JSON.parse(storagedToken);
        setToken(storagedToken);
        setUser(storagedUser);
      }

      APIUsuarios.defaults.headers.common['Authorization'] = token;

      setToken(token);

      setUser({
        id,
        name,
        email,
      });

      // passar para proximas requisições o nosso token
      // APIUsuarios.defaults.headers.common['Authorization'] = `Beare ${token}`;

      // Redirecionar o user para / dashboard
      //navigate('/');
    } catch (err) {
      console.log('erro ao acessar', err);
    }
  }

  // const logout = useCallback(() => {
  //   localStorage.removeItem('access_token');
  //   setToken('');
  // }, []);

  return (
    <AuthContext.Provider value={{ user, isAuthenticated, signin, token }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useProfileUser() {
  const Context = useContext(AuthContext);
  return { ...Context };
}
